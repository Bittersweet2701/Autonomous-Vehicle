/*
 * Servo_Motor.c
 *
 *  Created on: Jul 10, 2024
 *      Author: admin
 */

#include "Servo_Motor.h"
#include "stdlib.h"

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
void SERVO_Motor_Set_Steering(SERVO_Motor_t * const SERVO_Motor_p)
{
	HAL_TIM_PWM_Start(SERVO_Motor_p->timer_p, SERVO_Motor_p->timChannel);
	if (SERVO_Motor_p->duty_steering > 75)
		SERVO_Motor_p->duty_steering = 75;
	else if (SERVO_Motor_p->duty_steering < 25)
		SERVO_Motor_p->duty_steering = 25;
	switch (SERVO_Motor_p->timChannel)
	{
	case TIM_CHANNEL_1:
		SERVO_Motor_p->timer_p->Instance->CCR1 = SERVO_Motor_p->duty_steering;
		break;
	case TIM_CHANNEL_2:
		SERVO_Motor_p->timer_p->Instance->CCR2 = SERVO_Motor_p->duty_steering;
		break;
	case TIM_CHANNEL_3:
		SERVO_Motor_p->timer_p->Instance->CCR3 = SERVO_Motor_p->duty_steering;
		break;
	case TIM_CHANNEL_4:
		SERVO_Motor_p->timer_p->Instance->CCR4 = SERVO_Motor_p->duty_steering;
		break;
	}
}

void SERVO_MOTOR_Init(SERVO_Motor_t * const SERVO_Motor_p,
					TIM_HandleTypeDef * timer_p,
					uint32_t timChannel,
					void (* set_steering_func)(SERVO_Motor_t * const SERVO_Motor_p))
{
	SERVO_Motor_p->set_steering = set_steering_func;
	SERVO_Motor_p->duty_steering = DUTY_CYCLE_MIDDLE;
	SERVO_Motor_p->timer_p = timer_p;
	SERVO_Motor_p->timChannel = timChannel;
	SERVO_Motor_Set_Steering(SERVO_Motor_p);
}

SERVO_Motor_t * SERVO_MOTOR_Create(TIM_HandleTypeDef * timer_p, uint32_t timChannel)
{
	SERVO_Motor_t * SERVO_Motor_p = malloc(sizeof(SERVO_Motor_t));
	if (SERVO_Motor_p != NULL)
	{
		SERVO_MOTOR_Init(SERVO_Motor_p, timer_p, timChannel, SERVO_Motor_Set_Steering);
	}
	else
	{
		return NULL;
	}
	return SERVO_Motor_p;
}

void SERVO_MOTOR_Destroy(SERVO_Motor_t * const SERVO_Motor_p)
{
	free(SERVO_Motor_p);
}


