/*
 * Lighting_System.c
 *
 *  Created on: Jul 10, 2024
 *      Author: admin
 */

#include "Lighting_System.h"
#include "stdlib.h"

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
void LIGHTING_SYSTEM_Set_Lighting(LIGHTING_System_t * const LIGHTING_System_p)
{
	switch (BRUSHED_DC_Motor_p->timChannel)
	{
	case TIM_CHANNEL_1:
		if (BRUSHED_DC_Motor_p->speed == STOP_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR1 = DUTY_CYCLE_STOP;
		if (BRUSHED_DC_Motor_p->speed == LOW_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR1 = DUTY_CYCLE_LOW;
		if (BRUSHED_DC_Motor_p->speed == MEDIUM_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR1 = DUTY_CYCLE_MEDIUM;
		if (BRUSHED_DC_Motor_p->speed == HIGH_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR1 = DUTY_CYCLE_HIGH;
		break;
	case TIM_CHANNEL_2:
		if (BRUSHED_DC_Motor_p->speed == STOP_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR2 = DUTY_CYCLE_STOP;
		if (BRUSHED_DC_Motor_p->speed == LOW_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR2 = DUTY_CYCLE_LOW;
		if (BRUSHED_DC_Motor_p->speed == MEDIUM_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR2 = DUTY_CYCLE_MEDIUM;
		if (BRUSHED_DC_Motor_p->speed == HIGH_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR2 = DUTY_CYCLE_HIGH;
		break;
	case TIM_CHANNEL_3:
		if (BRUSHED_DC_Motor_p->speed == STOP_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR3 = DUTY_CYCLE_STOP;
		if (BRUSHED_DC_Motor_p->speed == LOW_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR3 = DUTY_CYCLE_LOW;
		if (BRUSHED_DC_Motor_p->speed == MEDIUM_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR3 = DUTY_CYCLE_MEDIUM;
		if (BRUSHED_DC_Motor_p->speed == HIGH_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR3 = DUTY_CYCLE_HIGH;
		break;
	case TIM_CHANNEL_4:
		if (BRUSHED_DC_Motor_p->speed == STOP_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR4 = DUTY_CYCLE_STOP;
		if (BRUSHED_DC_Motor_p->speed == LOW_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR4 = DUTY_CYCLE_LOW;
		if (BRUSHED_DC_Motor_p->speed == MEDIUM_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR4 = DUTY_CYCLE_MEDIUM;
		if (BRUSHED_DC_Motor_p->speed == HIGH_SPEED)
			BRUSHED_DC_Motor_p->timer_p->Instance->CCR4 = DUTY_CYCLE_HIGH;
		break;
	}
}

void LIGHTING_SYSTEM_Init(LIGHTING_System_t * const LIGHTING_System_p,
							TIM_HandleTypeDef * timer_p,
							uint32_t timChannel,
							TURN_Direction_t turning_direct,
							GPIO_TypeDef * GPIO_p,
							uint16_t GPIO_LIGHTING_Pin,
							void (* set_lighting_func)(LIGHTING_System_t * const LIGHTING_System_p))
{
	LIGHTING_System_p->timer_p = timer_p;
	LIGHTING_System_p->timChannel = timChannel;
	LIGHTING_System_p->turning_direct = turning_direct;
	LIGHTING_System_p->light_illuminated_mode = LIGHT_ILLUMINATED;
	LIGHTING_System_p->GPIO_p = GPIO_p;
	LIGHTING_System_p->GPIO_LIGHTING_Pin = GPIO_LIGHTING_Pin;
	HAL_TIM_PWM_Start(LIGHTING_System_p->timer_p, LIGHTING_System_p->timChannel);
	LIGHTING_SYSTEM_Set_Lighting(LIGHTING_System_p);
}

LIGHTING_System_t * LIGHTING_SYSTEM_Create(TIM_HandleTypeDef * timer_p,
											uint32_t timChannel,
											TURN_Direction_t turning_direct,
											LIGHT_Illuminated_t light_illuminated_mode,
											GPIO_TypeDef * GPIO_p,
											uint16_t GPIO_LIGHTING_Pin)
{
	LIGHTING_System_t * LIGHTING_System_p = malloc(sizeof(LIGHTING_System_t));
	if (LIGHTING_System_p != NULL)
	{

	}
	return LIGHTING_System_p;
}

void LIGHTING_SYSTEM_Destroy(LIGHTING_System_t * const LIGHTING_System_p)
{
	free(LIGHTING_System_p);
}


