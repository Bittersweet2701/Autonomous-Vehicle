/*
 * Servo_Motor.c
 *
 *  Created on: Jul 10, 2024
 *      Author: admin
 */

#include "Servo_Motor.h"
#include "stdlib.h"

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
void SERVO_Motor_Set_Steering(SERVO_Motor_t * const SERVO_Motor_p, uint32_t steering_duty)
{
	switch (SERVO_Motor_p->timChannel)
	{
	case TIM_CHANNEL_1:
		SERVO_Motor_p->timer_p.Instance->CCR1 = steering_duty;
		break;
	case TIM_CHANNEL_2:
		SERVO_Motor_p->timer_p.Instance->CCR2 = steering_duty;
		break;
	case TIM_CHANNEL_3:
		SERVO_Motor_p->timer_p.Instance->CCR3 = steering_duty;
		break;
	case TIM_CHANNEL_4:
		SERVO_Motor_p->timer_p.Instance->CCR4 = steering_duty;
		break;
	}
}

void SERVO_MOTOR_Init(BRUSHED_DC_Motor_t * const BRUSHED_DC_Motor_p,
							TIM_HandleTypeDef * timer_p,
							uint32_t timChannel,
							DIRECTION_DC_Motor_t direct,
							void (* set_speed_func)(BRUSHED_DC_Motor_t * const BRUSHED_DC_Motor_p))
{
	BRUSHED_DC_Motor_p->set_speed = set_speed_func;
	BRUSHED_DC_Motor_p->speed = STOP_SPEED;
	BRUSHED_DC_Motor_p->timer_p = timer_p;
	BRUSHED_DC_Motor_p->timChannel = timChannel;
	BRUSHED_DC_Motor_p->direction = direct;
	HAL_TIM_PWM_Start(BRUSHED_DC_Motor_p->timer_p, BRUSHED_DC_Motor_p->timChannel);
	BRUSHED_DC_Motor_Set_speed(BRUSHED_DC_Motor_p);
}

SERVO_Motor_t * SERVO_MOTOR_Create(TIM_HandleTypeDef * timer_p, uint32_t timChannel)
{
	SERVO_Motor_t * BRUSHED_DC_Motor_p = malloc(sizeof(SERVO_Motor_t));
	if (BRUSHED_DC_Motor_p != NULL)
	{
		BRUSHED_DC_MOTOR_Init(BRUSHED_DC_Motor_p, timer_p, timChannel, direct, BRUSHED_DC_Motor_Set_speed);
	}
	else
	{
		return NULL;
	}
	return BRUSHED_DC_Motor_p;
}

void SERVO_MOTOR_Destroy(SERVO_MOTOR_t * const SERVO_MOTOR_p)
{
	free(BRUSHED_DC_Motor_p);
}


